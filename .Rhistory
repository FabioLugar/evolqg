orv <- model$model[[1]]
fac <- model$model[-1]
df <- model$df.residual
res <- residuals (model)
size <- dim (res)
straps <- array (0, c(size[1], iterations))
r2 <- mcv <- evar <- c()
i <- 1
straps[,i] <- sample ((size[1]), replace = TRUE)
corr <- cov2cor (var (res[straps[,i],]) * (size[1] - 1)/df)
r2[i] <- mean (corr[lower.tri(corr)]^2)
evar[i] <- cv (eigen(var (res[straps[,i],] * (size[1] - 1)/df))$values)
orv.s <- orv[straps[,i],]
fac.s <- fac[straps[,i],]
tmp1 <- table (fac.s)
tmp2 <- by (orv.s,fac.s,cv)
tmp2 <- by (orv.s,fac.s,cv)
?by
x$model[[1]]
class(x$model[[1]])
orv.s <- orv[straps[,i],]
class(orv.s)
fac.s
orv.s
orv.s <- orv[straps[,i],]
tmp2 <- by (orv.s,fac.s,cv)
tmp2
cv
tmp2 <- tapply (orv.s,fac.s,cv)
straps[,i] <- sample ((size[1]), replace = TRUE)
corr <- cov2cor (var (res[straps[,i],]) * (size[1] - 1)/df)
r2[i] <- mean (corr[lower.tri(corr)]^2)
evar[i] <- cv (eigen(var (res[straps[,i],] * (size[1] - 1)/df))$values)
orv.s <- orv[straps[,i],]
tmp1 <- table (fac.s)
tmp2 <- tapply (orv.s,fac.s,cv)
length(orv.s)
length(fac.s)
tmp1
straps[,i] <- sample ((size[1]), replace = TRUE)
corr <- cov2cor (var (res[straps[,i],]) * (size[1] - 1)/df)
r2[i] <- mean (corr[lower.tri(corr)]^2)
evar[i] <- cv (eigen(var (res[straps[,i],] * (size[1] - 1)/df))$values)
orv.s <- orv[straps[,i],]
fac.s <- fac[straps[,i],]
tmp1 <- table (fac.s)
tmp2 <- by (orv.s,fac.s,cv)
tmp2 <- tapply(orv.s,fac.s,cv)
fac
orv
iterations = 10
model <- ind.data
orv <- model$model[[1]]
model
fac <- model$model[-1]
orv
fac
df <- model$df.residual
res <- residuals (model)
size <- dim (res)
straps <- array (0, c(size[1], iterations))
r2 <- mcv <- evar <- c()
i <- 1
straps[,i] <- sample ((size[1]), replace = TRUE)
corr <- cov2cor (var (res[straps[,i],]) * (size[1] - 1)/df)
r2[i] <- mean (corr[lower.tri(corr)]^2)
evar[i] <- cv (eigen(var (res[straps[,i],] * (size[1] - 1)/df))$values)
orv.s <- orv[straps[,i],]
fac.s <- fac[straps[,i],]
tmp1 <- table (fac.s)
tmp2 <- tapply(orv.s,fac.s,cv)
orv.s
fac.s
orv.s
fac.s
tmp2 <- tapply(orv.s,fac.s,cv)
?tapply
?by
ddply(orv.s, fac.s, cv)
?ddply
orv.s
fac.s
ddply(orv.s, fac.s, cv)
ddply(orv.s, fac.s, mean)
ddply(orv.s, fac.s, mean)
ddply(orv.s, fac.s)
ddply(as.data.frame(orv.s), fac.s)
data.frame(orv.s, fac.s)
data = data.frame(orv.s, fac.s)
names(data)
ddply(data, fac.s)
ddply(data, fac.s, mean)
ddply(data, .(fac.s), mean)
ddply(data, .(fac.s), rowmean)
ddply(data, .(fac.s), rowMean)
ddply(data, .(fac.s), colMean)
ddply(data, .(fac.s), colMeans)
ddply(data, .(fac.s))
ddply(data, .(fac.s), function(x) meanx(x[,1:4]))
ddply(data, .(fac.s), function(x) mean(x[,1:4]))
ddply(data, .(fac.s)
ddply(data, .(fac.s))
ddply(data, .(fac.s), cv)
ddply(data, .(fac.s), summarize)
ddply(data, .(fac.s), nrow)
ddply(data, .(fac.s), summarize, mean)
ddply(data, .(fac.s), summarize)
ddply(data, .(fac.s), mean)
tapply(data, .(fac.s), cv)
tapply(data, ac.s, cv)
tapply(data, fac.s, cv)
tapply(data, data[,5], cv)
ddply(iris, species)
ddply(iris, .species)
ddply(iris, .9species)
ddply(iris, .(species)
)
ddply(iris, .(species))
names(iris)
ddply(iris, .(Species))
ddply(iris, .(Species), mean)
ddply(iris, .(Species), rowMeans)
ddply(iris, .(Species), .(rowMeans)
)()
ddply(iris, .(Species), .(rowMeans))
ddply(iris, "Species", rowMeans)
ddply(iris, "Species")
daply(iris, "Species")
daply(iris, "Species", mean)
daply(iris[,1:4], "Species", mean)
daply(iris, "Species", mean)
daply(iris, "Species", summarize, mean)
daply(iris, "Species", summarize, mean = mean(iris[,1:4]))
daply(iris, "Species", summarize, mean = mean(names(iris)[1]))
daply(iris, "Species", summarize, mean = mean("Sepal Lenght"))
names(iris)
daply(iris, "Species", summarize, mean = mean("Sepal.Lenght"))
daply(iris, "Species", summarize, mean = mean(Sepal.Lenght))
baseball
names(baseball)
daply(iris, ~ Species, summarize, mean = mean(Sepal.Lenght))
daply(iris, ~ Species, summarize
)
daply(iris, ~ Species, nrow)
daply(iris, ~ Species, ncow)
daply(iris, ~ Species, ncol)
daply(iris, ~ Species, nrow)
daply(iris, ~ Species, summarise)
daply(iris, ~ Species, summarise, mean = mean(Sepal.Lenght))
daply(iris, ~ Species, summarise, mean = mean(.Sepal.Lenght))
daply(iris, ~ Species, summarise, mean = mean(Sepal.Lenght))
require(plyr)
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
dfx
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
iris
daply(iris, ~ Species, summarise, mean = mean(Sepal.Lenght))
names(iris)
daply(iris, ~ Species, summarise, mean = mean(Sepal.Length))
ddply(iris, ~ Species, summarise, mean = mean(Sepal.Length))
ddply(iris, ~ Species, summarise, mean = mean(names(iris)))
ddply(iris, ~ Species, summarise, mean = mean(.(names(iris)))
)
ddply(iris, ~ Species, summarise, mean = mean(.(names(iris)[1])))
ddply(iris, ~ Species, summarise, mean = mean(.(names(iris)[1])))
ddply(iris, ~ Species, function(x) print(x))
ddply(iris, ~ Species, function(x) print(x[,1,4]))
x = ddply(iris, ~ Species, function(x) print(x[,1,4]))
x = ddply(iris, ~ Species, function(x) print(x[,1:4]))
x = ddply(iris, ~ Species, function(x) colMeans(x[,1:4]))
x
evar[i] <- cv (eigen(var (res[straps[,i],] * (size[1] - 1)/df))$values)
data <- data.frame(orv.s = orv[straps[,i],], fac.s = fac[straps[,i],])
data
cv <- function (x) return (sd(x)/mean(x))
model <- ind.data
orv <- model$model[[1]]
fac <- model$model[-1]
df <- model$df.residual
res <- residuals (model)
size <- dim (res)
straps <- array (0, c(size[1], iterations))
r2 <- mcv <- evar <- c()
i <- 1
straps[,i] <- sample ((size[1]), replace = TRUE)
corr <- cov2cor (var (res[straps[,i],]) * (size[1] - 1)/df)
r2[i] <- mean (corr[lower.tri(corr)]^2)
evar[i] <- cv (eigen(var (res[straps[,i],] * (size[1] - 1)/df))$values)
data <- data.frame(orv.s = orv[straps[,i],], fac.s = fac[straps[,i],])
tmp1 <- table (data$fac.s)
tmp1
size
tmp2 <- ddply(data, ~ fac.s, funtion(x) cv(x[,1:size[2]]))
tmp1 <- table (data$fac.s)
tmp2 <- ddply(data, ~ fac.s, funtion(x) cv(x[,1:size[2]]))
tmp2 <- ddply(data, ~ fac.s, function(x) cv(x[,1:size[2]]))
data
data[,1:size[2]]
sd(data[,1:size[2]])
sd(data[1,1:size[2]])
sd(data[,1:size[2]])
tmp2 <- ddply(data, ~ fac.s, function(x) apply(x[,1:size[2]], 2, cv))
tmp2
tmp2 <- ddply(data, ~ fac.s, function(x) apply(x[,1:size[2]], 2, cv))[-1]
tmp2
tmp3 <- unlist (lapply (tmp2, mean))
mcv[i] <- sum ((tmp3 * tmp1)/sum (tmp1))
tmp3
tmp2
tmp1
rowMeans(tmp2)
tmp3 <- rowMeans(tmp2, mean)
mcv[i] <- sum ((tmp3 * tmp1)/sum (tmp1))
data <- data.frame(orv.s = orv[straps[,i],], fac.s = fac[straps[,i],])
tmp1 <- table (data$fac.s)
tmp2 <- ddply(data, ~ fac.s, function(x) apply(x[,1:size[2]], 2, cv))[-1]
tmp3 <- rowMeans(tmp2, mean)
evar[i] <- cv (eigen(var (res[straps[,i],] * (size[1] - 1)/df))$values)
data <- data.frame(orv.s = orv[straps[,i],], fac.s = fac[straps[,i],])
tmp1 <- table (data$fac.s)
tmp2 <- ddply(data, ~ fac.s, function(x) apply(x[,1:size[2]], 2, cv))[-1]
tmp3 <- rowMeans(tmp2)
mcv[i] <- sum ((tmp3 * tmp1)/sum (tmp1))
mcv
library(Morphometrics)
x
x
x = lm(as.matrix(iris[,1:4])~iris[,5])
x
CalcR2CvCorrected(x)
library(Morphometrics)
CalcR2CvCorrected(x)
library(Morphometrics)
CalcR2CvCorrected(x)
x = 1:10
y = 2:11
x = 3:12
z = 3:12
x = 1:10
rbind(x, y, z)
cbind(x, y, z)
library(Morphometrics)
CalcR2CvCorrected(x)
library(Morphometrics)
CalcR2CvCorrected(x)
cv <- function (x) return (sd(x)/mean(x))
model <- ind.data
ind.data <- model$model[[1]]
fac <- model$model[-1]
df <- model$df.residual
res <- residuals (model)
size <- dim (res)
r2 <- mcv <- evar <- c()
i <- 1
x = lm(as.matrix(iris[, 1:4])~iris[,5])
x
ind.data =x
cv <- function (x) return (sd(x)/mean(x))
model <- ind.data
ind.data <- model$model[[1]]
fac <- model$model[-1]
df <- model$df.residual
res <- residuals (model)
size <- dim (res)
r2 <- mcv <- evar <- c()
i <- 1
current.sample <- sample ((size[1]), replace = TRUE)
corr <- cov2cor (var (res[current.sample,]) * (size[1] - 1)/df)
r2[i] <- mean (corr[lower.tri(corr)]^2)
evar[i] <- cv (eigen(var (res[current.sample,] * (size[1] - 1)/df))$values)
data <- data.frame(ind.data.s = ind.data[current.sample,], fac.s = fac[current.sample,])
tmp1 <- table (data$fac.s)
tmp2 <- ddply(data, ~ fac.s, function(x) apply(x[,1:size[2]], 2, cv))[-1]
tmp3 <- rowMeans(tmp2)
mcv[i] <- sum ((tmp3 * tmp1)/sum (tmp1))
it.stats <- cbind(r2, evar, mcv)
colnames(it.stats) <- c("r2", "eVals_cv", "mean_cv")
it.stats
library(Morphometrics)
CalcR2CvCorrected(x)
res = CalcR2CvCorrected(x)
res[1]
res[[1]]
library(Morphometrics)
res = CalcR2CvCorrected(x)
library(Morphometrics)
res = CalcR2CvCorrected(x)
res[[1]]
res[[2]]
res[[3]]
res[[2]]
res[[1]]
library(testthat)
test_dir("./tests/testthat/")
test_dir("./tests/testthat/")
mat.list= RandomMatrix(10, 10)
KrzProjection(mat.list)
KrzProjection(mat.list, RandomMatrix(10))
KrzProjection(mat.list, mat.list[[1]]
)
KrzProjection(mat.list, mat.list[[1]])
KrzProjection(mat.list)
test_file("tests/testthat/test.MatrixComparisons.r")
test_file("tests/testthat/test.MatrixComparisons.r")
KrzProjection(mat.list)[,1]
unlis(KrzProjection(mat.list)[,1])
unlist(KrzProjection(mat.list)[,1])
class(KrzProjection(mat.list)[,1])
class(KrzProjection(mat.list, mat.list[[1]]))
class(KrzProjection(mat.list, mat.list[[1]])[1])
class(KrzProjection(mat.list, mat.list[[1]])[[1])
class(KrzProjection(mat.list, mat.list[[1]])[[1]])
test_file("tests/testthat/test.MatrixComparisons.r")
test_file("tests/testthat/test.MatrixComparisons.r")
library(Morphometrics)
library(Morphometrics)
library(testthat)
test_dir("./tests//testthat")
library(Morphometrics)
test_dir("./tests//testthat")
library(Morphometrics)
library(Morphometrics)
test_dir("./tests//testthat")
library(Morphometrics)
library(Morphometrics)
library(Morphometrics)
library(Morphometrics)
library(Morphometrics)
?AncestralStates
data(bird.orders)
tree <- bird.orders
mat.list <- RandomMatrix(5, length(tree$tip.label))
names(mat.list) <- tree$tip.label
sample.sizes <- runif(length(tree$tip.label), 15, 20)
AncestralStates(tree, mat.list, sample.sizes)
class(tree)
data(bird.orders)
tree <- bird.orders
mat.list <- RandomMatrix(5, length(tree$tip.label))
names(mat.list) <- tree$tip.label
sample.sizes <- runif(length(tree$tip.label), 15, 20)
AncestralStates(tree, mat.list, sample.sizes)
source('~/projects/Morphometrics/R/MultiMahalanobis.R')
?MultiMahalanobis
mean.1 <- colMeans(matrix(rnorm(30*10), 30, 10))
mean.2 <- colMeans(matrix(rnorm(30*10), 30, 10))
mean.3 <- colMeans(matrix(rnorm(30*10), 30, 10))
mean.list <- list(mean.1, mean.2, mean.3)
# If cov.matrix is identity, calculated distance is euclidian
euclidian <- MultiMahalanobis(mean.list, diag(rep(1, 10)))
euclidian
x = (mean.1 - mean.2)
x%*%solve(diag(rep(1, 10)), x)
library(Morphometrics)
library(Morphometrics)
?TestModularity
matrix(sample(c(1, 0), 30, replace=TRUE), 10, 3)
cor.matrix <- RandomMatrix(10)
rand.hipots <- matrix(sample(c(1, 0), 30, replace=TRUE), 10, 3)
mod.test <- TestModularity(cor.matrix, rand.hipots)
mod.test
TestModularity
CreateHipotMatrix
library(Morphometrics)
library(Morphometrics)
library(Rcpp)
sourceCpp("./src/l-modularity.cpp")
s = numeric(10)
s
library(Morphometrics)
s
x  =RandomMatrix(10)
annealing(x, s)
x
s
annealing(x, s)
sourceCpp("./src/l-modularity.cpp")
prepara_J(x)
annealing(x, s)
s
sourceCpp("./src/l-modularity.cpp")
annealing(x, s)
annealing(x, s)
annealing(x, s)
sourceCpp("./src/l-modularity.cpp")
annealing(x, s)
library(Morphometrics)
annealing(x, s)
annealing
sourceCpp("./src/l-modularity.cpp")
annealing
annealing(x, s)
library(Morphometrics)
library(Morphometrics)
LModularity(x)
LModularity(x)
sourceCpp("./src/l-modularity.cpp")
LModularity(x)
LModularity(x)
s = LModularity(x)[2]
s
as.numeric(as.factor(s))
as.numeric(factor(s))
s = LModularity(x)[[2]]
as.numeric(factor(s))
s = LModularity(x)
s
source('~/projects/Morphometrics/R/l_modularity.R')
s
s = LModularity(x)
s
s[[2]]
mod =s[[2]]
mod
unique(mod)
length(unique(mod))
source('~/projects/Morphometrics/R/l_modularity.R')
modules = unique(mod)
mod_hipotesis <- array(0, c(num.traits, num_modules))
mod_hipotesis <- array(0, c(10, num_modules))
length(modules) -> num_modules
mod_hipotesis <- array(0, c(10, num_modules))
mod_hipotesis
mod_hipotesis[modules,]
mod_hipotesis[partition == 1,1]
s
mod_hipotesis[s == 1,1]
mod_hipotesis[s[[2]] == 1, 1]
mod_hipotesis[s[[2]] == 1, 1] = 1
mod_hipotesis[s[[2]] == 2, 2] = 1
mod_hipotesis[s[[2]] == 3, 3] = 1
mod_hipotesis
source('~/projects/Morphometrics/R/l_modularity.R')
LModularity(x)
source('~/.active-rstudio-document')
LModularity(x)
source('~/projects/Morphometrics/R/l_modularity.R')
LModularity(x)
s
library(Morphometrics)
LModularity(x)
sourceCpp("./src/l-modularity.cpp")
LModularity(x)
rep(0.5, 10)
c(rep(0.5, 5), rep(0, 5))
x = c(rep(0.5, 5), rep(0, 5))
outer(x, x)
y = outer(x, x)
x = c(rep(0, 5), rep(0.5, 5))
y2 = outer(x, x)
y2
Reduce("+", y, y2)
y  +y2
x = y  +y2
x
LModularity(x)
?LModularity
library(Morphometrics)
?LModularity
LModularity(x)
sourceCpp("./src/l-modularity.cpp")
LModularity(x)
library(Morphometrics)
LModularity(x)
library(Morphometrics)
compileAttributes()
compileAttributes(Morphometrics)
?compileAttributes
compileAttributes("./")
library(Morphometrics)
LModularity(x)
library(Morphometrics)
LModularity(x)
sourceCpp("./src/l-modularity.cpp")
annealing
library(Morphometrics)
annealing
library(Morphometrics)
annealing
library(Morphometrics)
annealing
annealing
library(Morphometrics)
annealing
LModularity(x)
library(Morphometrics)
annealing
library(Morphometrics)
annealing
library(Morphometrics)
annealing
Rcpp.package.skeleton("mypackage")
library(Morphometrics)
compileAttributes("./")
library(Morphometrics)
annealing
library(Morphometrics)
annealing
library(Morphometrics)
compileAttributes("./")
library(Morphometrics)
annealing
RandomMatrix(x)
x = RandomMatrix(10)
x
LModularity(x)
